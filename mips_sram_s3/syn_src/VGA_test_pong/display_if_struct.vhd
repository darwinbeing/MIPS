-- VHDL Entity CSELib.Display_IF.symbol
--
-- Created:
--          by - jinz.student (tachyon.cse.sc.edu)
--          at - 09:43:30 11/11/10
--
-- Generated by Mentor Graphics' HDL Designer(TM) 2009.1 (Build 12)
--
LIBRARY ieee;
USE ieee.std_logic_1164.all;
USE ieee.std_logic_arith.all;

ENTITY Display_IF IS
   PORT( 
      clk        : IN     STD_LOGIC  := '0';
      mem_waddr  : IN     std_logic_vector (12 DOWNTO 0);
      mem_wdata  : IN     std_logic_vector (14 DOWNTO 0);
      mem_web    : IN     std_logic;
      rst        : IN     STD_LOGIC  := '0';
      VGA_B      : OUT    std_logic_vector (9 DOWNTO 0);
      VGA_BLANK  : OUT    std_logic;
      VGA_CLK    : OUT    STD_LOGIC;
      VGA_G      : OUT    std_logic_vector (9 DOWNTO 0);
      VGA_H_SYNC : OUT    std_logic;
      VGA_R      : OUT    std_logic_vector (9 DOWNTO 0);
      VGA_SYNC   : OUT    std_logic;
      VGA_V_SYNC : OUT    std_logic
   );

-- Declarations

END Display_IF ;

--
-- VHDL Architecture CSELib.Display_IF.struct
--
-- Created:
--          by - jinz.student (tachyon.cse.sc.edu)
--          at - 09:43:30 11/11/10
--
-- Generated by Mentor Graphics' HDL Designer(TM) 2009.1 (Build 12)
--
LIBRARY ieee;
USE ieee.std_logic_1164.all;
USE ieee.std_logic_arith.all;
USE ieee.std_logic_unsigned.all;
--LIBRARY altera_mf;
--USE altera_mf.all;

--LIBRARY CSELib;

ARCHITECTURE struct OF Display_IF IS

   -- Architecture declarations

   -- Internal signal declarations
   SIGNAL blue  : std_logic_vector(9 DOWNTO 0);
   SIGNAL dout  : STD_LOGIC := '0';
   SIGNAL green : std_logic_vector(9 DOWNTO 0);
   SIGNAL iCLK  : std_logic;
   SIGNAL px    : std_logic_vector(9 DOWNTO 0);
   SIGNAL py    : std_logic_vector(9 DOWNTO 0);
   SIGNAL red   : std_logic_vector(9 DOWNTO 0);


   -- Component Declarations
   COMPONENT Display
   PORT (
      clka        : IN     std_logic;
      clkb        : IN     STD_LOGIC;
      line_count  : IN     std_logic_vector (9 DOWNTO 0);
      mem_waddr   : IN     std_logic_vector (12 DOWNTO 0);
      mem_wdata   : IN     std_logic_vector (14 DOWNTO 0);
      mem_web     : IN     std_logic;
      pixel_count : IN     std_logic_vector (9 DOWNTO 0);
      blue        : OUT    std_logic_vector (9 DOWNTO 0);
      green       : OUT    std_logic_vector (9 DOWNTO 0);
      red         : OUT    std_logic_vector (9 DOWNTO 0)
   );
   END COMPONENT;
   COMPONENT VGA_PLL
   PORT (
      areset : IN     STD_LOGIC  := '0';
      inclk0 : IN     STD_LOGIC  := '0';
      c0     : OUT    STD_LOGIC ;
      c1     : OUT    STD_LOGIC ;
      c2     : OUT    STD_LOGIC 
   );
   END COMPONENT;
   COMPONENT VGA_Sync1
   GENERIC (
      H_SYNC_TOTAL : integer := 800;
      H_PIXELS     : integer := 640;
      H_SYNC_START : integer := 659;
      H_SYNC_WIDTH : integer := 96;
      V_SYNC_TOTAL : integer := 525;
      V_PIXELS     : integer := 480;
      V_SYNC_START : integer := 493;
      V_SYNC_WIDTH : integer := 2;
      H_START      : integer := 699
   );
   PORT (
      iBlue      : IN     std_logic_vector (9 DOWNTO 0);
      iCLK       : IN     std_logic;
      iGreen     : IN     std_logic_vector (9 DOWNTO 0);
      iRST_N     : IN     STD_LOGIC;
      iRed       : IN     std_logic_vector (9 DOWNTO 0);
      VGA_B      : OUT    std_logic_vector (9 DOWNTO 0);
      VGA_BLANK  : OUT    std_logic;
      VGA_G      : OUT    std_logic_vector (9 DOWNTO 0);
      VGA_H_SYNC : OUT    std_logic;
      VGA_R      : OUT    std_logic_vector (9 DOWNTO 0);
      VGA_SYNC   : OUT    std_logic;
      VGA_V_SYNC : OUT    std_logic;
      px         : OUT    std_logic_vector (9 DOWNTO 0);
      py         : OUT    std_logic_vector (9 DOWNTO 0)
   );
   END COMPONENT;

   -- Optional embedded configurations
   -- pragma synthesis_off
   --FOR ALL : VGA_PLL USE ENTITY CSELib.VGA_PLL;
   -- pragma synthesis_on


BEGIN

   -- ModuleWare code(v1.9) for instance 'U_1' of 'inv'
   dout <= NOT(rst);

   -- Instance port mappings.
   U_0 : Display
      PORT MAP (
         clka        => iCLK,
         clkb        => clk,
         pixel_count => px,
         line_count  => py,
         mem_waddr   => mem_waddr,
         mem_wdata   => mem_wdata,
         mem_web     => mem_web,
         red         => red,
         green       => green,
         blue        => blue
      );
   U_3 : VGA_PLL
      PORT MAP (
         areset => rst,
         inclk0 => clk,
         c0     => iCLK,
         c1     => OPEN,
         c2     => VGA_CLK
      );
   U_2 : VGA_Sync1
      PORT MAP (
         iCLK       => iCLK,
         iRST_N     => dout,
         iRed       => red,
         iGreen     => green,
         iBlue      => blue,
         px         => px,
         py         => py,
         VGA_R      => VGA_R,
         VGA_G      => VGA_G,
         VGA_B      => VGA_B,
         VGA_H_SYNC => VGA_H_SYNC,
         VGA_V_SYNC => VGA_V_SYNC,
         VGA_SYNC   => VGA_SYNC,
         VGA_BLANK  => VGA_BLANK
      );

END struct;
